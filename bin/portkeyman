#!/usr/bin/ruby -w

require 'optparse'
require 'logger'
require 'tempfile'
require 'tmpdir'
require 'fileutils'

VERSION="0.0.6"
TMPFILE = Tempfile.new("/tmp/packages.keyword_#{File.basename($0)}")

lc_messages = ENV["LC_MESSAGES"]
ENV["LC_MASSAGES"] = "en_US"

def main
  op = OptionParser.new
  op.summary_indent = ""
  op.banner = "#{File.basename($0)} [OPTIONS]"
  op.separator("")

  portage_keywords = "/etc/portage/package.keywords"

  options = {
    :keywordfiledir => portage_keywords,
    :pkg_ver_mig => false,
    :output_as => "file",
    :logfile => false,
    :drop => false,
    :version => false,
    :opt => false,
    :verbose => false
  }

  # set default log, for user /tmp - for root /var/log
  if Process.uid == 0
    logfile = "/var/log/#{File.basename($0)}.log"
  else
    logfile = "/tmp/#{File.basename($0)}.log"
  end

  # default ist nothing to due
  op.on("-d","--drop","remove not installed packages from keywords") do
    options[:opt] = true
    options[:drop] = true
  end

  # write bash_completion for this
  op.on("-k FILE_DIR","--keyword FILE_DIR", "set keyword file or directory, default: #{options[:keywordfiledir]}") do |args|
    options[:opt] = true
    options[:keywordfiledir] = args
  end

  # set logfile or use default
  user = ENV['USER'].to_s.strip
  op.on("-l LOGFILE","--logfile LOGFILE", "set logfile, default for user: #{user}, logfile: #{logfile}") do |args|
    options[:opt] = true
    options[:logfile] = args
  end

  # migrate_noversion Filelist
  op.on("-p","--pkg-mig","migrate no versions packages to installed packages") do
    options[:opt] = true
    options[:pkg_ver_mig] = true
  end

  op.on("-o [FILE|DIR]","--output [FILE|DIR]","output as file or directory, default: #{options[:output_as]}") do |args|
    options[:opt] = true
    arg = args.downcase

    if arg == "file" or arg == "f"
      options[:output_as] = "file"
    elsif arg == "dir" or arg == "f" or arg == "d"
      options[:output_as] = "dir"
    else
      puts "output_as file [f | file] or as directory [d | dir]"
      puts op
      exit
    end
  end

  op.on("-v","--verbose","verbose messages") do |arg|
    options[:opt] = true
    options[:verbose] = true
  end

  op.on("-V","--version","print version and exit") do
    options[:opt] = true
    puts "#{File.basename($0)} VERSION: #{VERSION}"
    exit
  end

  op.separator("")
  tool = File.basename($0)
  sample = (
    "Examples:\n"+
    "  #{tool} -l /tmp/#{tool}.log -k /etc/portage/package.keyword \t# set logfile to /tmp/#{tool}.log\n"+
    "  #{tool} -k /etc/portage/package.keywords -o f \t\t\t# save output as file\n"+
    "  #{tool} -k /etc/portage/package.keywords -o d \t\t\t# save output as directory (separate category)\n"+
    "  #{tool} -k /etc/portage/package.keywords -p \t\t\t# convert app-portage/genfoo-tools ~amd64 to >=app-portage/genfoo-tools-9999 ~amd64\n"+
    "  #{tool} --help \t\t\t\t\t\t\t# show this help"
  )

  sample.split("\n").each { |line| op.separator line }
  op.separator("")

  begin
    op.parse!
    if not options[:opt]
      puts op
      exit
    end
  rescue => exc
    puts exc
    puts "\n#{op}"
  end

  # set logfile for more output informations
  if options[:logfile]
    @log = Logger.new(options[:logfile], 'daily')
  else
    @log = Logger.new(logfile, 'daily')
  end

  if not File.exists?(options[:keywordfiledir])
    error_msg = "failure: #{options[:keywordfiledir]} no file or directory"
    @log.error(error_msg)
    puts error_msg
    puts op
    exit
  else
    pkgscan(options)
  end
end

def show_comment(_line, _comment_tmp_file)
  if _line.start_with?("#")
    comment = _line
    comment = _line.split(/#/)[1]
    comment = comment.strip unless comment.nil?
    _comment_tmp_file.syswrite(comment)
  else
    comment = _line.split(/#/)[1]
    comment = comment.strip unless comment.nil?
  end
  comment
end

def pkgscan(_options)
  installed_pkg_versions = {}
  installed_pkg_noversions = {}
  not_installed_pkg = {}

  comment_tmp_file = "/tmp/comments"
  File.delete(comment_tmp_file) if File.file?(comment_tmp_file)

  # file function
  if not File.directory?(_options[:keywordfiledir])
    File.readlines(_options[:keywordfiledir]).each do |line|
      next if line == "\n"
      pkg = line.split(/ /)[0].strip
      keyword = line.split(/ /)[1].strip

      tmp_file = File.new(comment_tmp_file,"a")
      comment = show_comment(line, tmp_file)

      if comment.nil?
        File.readlines(comment_tmp_file).each do |comline|
          next if comline.nil?
          comment = comline
        end
        begin
          File.delete(comment_tmp_file)
        rescue => exc
          @log.fatal(exc)
        end
      end

      comment = show_comment(line, comment_tmp_file)

      if line.start_with?(">")
        installed_pkg_versions[pkg] = {:pkg => pkg, :keyword => keyword, :comment => comment}
        next
      elsif line.start_with?("=")
        installed_pkg_versions[pkg] = {:pkg => pkg, :keyword => keyword, :comment => comment}
        next
      else
        pkg_full = `qlist -ICv #{pkg} `.strip
        if pkg_full.empty?
          not_installed_pkg[pkg] = {:pkg => pkg, :keyword => keyword, :comment => comment}
          next
        end
        installed_pkg_noversions[pkg_full] = {:pkg => pkg, :keyword => keyword, :commnet => comment}
      end
    end
  end

  # directory function
  if File.directory?(_options[:keywordfiledir])
    Dir[File.join(_options[:keywordfiledir], "*")].each do |files|
      File.readlines(files).each do |line|
        next if line == "\n"
        pkg = line.split(/ /)[0].strip
        keyword = line.split(/ /)[1].strip

        tmp_file = File.new(comment_tmp_file,"a")
        comment = show_comment(line, tmp_file)

        if comment.nil?
          File.readlines(comment_tmp_file).each do |comline|
            next if comline.nil?
            comment = comline
          end
          begin
            File.delete(comment_tmp_file)
          rescue => exc
            @log.fatal(exc)
          end
        end

        if line.start_with?(">")
          installed_pkg_versions[pkg] = {:pkg => pkg, :keyword => keyword, :comment => comment}
          next
        elsif line.start_with?("=")
          installed_pkg_versions[pkg] = {:pkg => pkg, :keyword => keyword, :comment => comment}
          next
        else
          pkg_full = `qlist -ICv #{pkg} `.strip
          if pkg_full.empty?
            not_installed_pkg[pkg] = {:pkg => pkg, :keyword => keyword, :comment => comment}
            next
          end
          installed_pkg_noversions[pkg_full] = {:pkg => pkg, :keyword => keyword, :comment => comment}
        end
      end
    end
  end

  migrate_pkg(installed_pkg_noversions, installed_pkg_versions, not_installed_pkg, _options)

  # save as file and exit
  if not _options[:output_as] == "dir"
    newfile = "/tmp/package.keywords.new"
    FileUtils.cp(TMPFILE, newfile)
    info_msg = "new packages.keywords is saved as File to: #{newfile}"
    @log.info("#{info_msg}")
    puts info_msg
    exit
  end

  # save as directory
  if _options[:output_as] == "dir"
    result = migrate_to_dir
    if not result
      error_msg = "unkown error, package.keywords not saved"
      @log.error("#{error_msg}")
      puts error_msg
      exit
    end
    info_msg = "new package.keyword is saved as directory to: /tmp/package.keywords"
    @log.info("#{info_msg}")
    puts info_msg
    exit
  end
end

def migrate_pkg(_installed_pkg_noversions, _installed_pkg_versions, _not_installed_pkg, _options)
  migrate_list = {}
  # migrate all to >=categorie/name-version arch

  _installed_pkg_noversions.each_pair do |pkg,info|
    if _options[:pkg_ver_mig]
      if info[:comment].nil?
        info_msg = "Migrate #{pkg} to #{info[:full_name]} #{info[:keyword]}"
      else
        info_msg = "Migrate #{pkg} to #{info[:full_name]} #{info[:keyword]} #{info[:comment]}"
      end
      @log.info("#{info_msg}")
      puts info_msg if _options[:verbose]
      if info[:comment].nil?
        migrate_list[pkg] = {:pkg => ">=#{pkg}", :keyword => info[:keyword]}
      else
        migrate_list[pkg] = {:pkg => ">=#{pkg}", :keyword => info[:keyword], :comment => "# #{info[:comment]}"}
      end
    else
      if info[:comment].nil?
        warning_msg = "don't migrate package #{info[:pkg]}. Installed version: #{pkg} used keyword: #{info[:keyword]}"
        migrate_list[pkg] = {:pkg => info[:pkg], :keyword => info[:keyword]}
      else
        warning_msg = "don't migrate package #{info[:pkg]}. Installed version: #{pkg} used keyword: #{info[:keyword]} and comment: #{info[:comment]}"
        migrate_list[pkg] = {:pkg => info[:pkg], :keyword => info[:keyword], :comment => "# #{info[:comment]}"}
      end
      @log.warn("#{warning_msg}")
      puts warning_msg if _options[:verbose]
    end
  end

  # not installed list ony when not options[:drop] true
  if not _options[:drop]
    _not_installed_pkg.each_pair do |pkg,info|
      if info[:comment].nil?
        warning_msg ="Ignore not installed package: #{pkg}"
        migrate_list[pkg] = {:pkg => info[:pkg], :keyword => info[:keyword]}
      else
        warning_msg ="Ignore not installed package: #{pkg} comment: #{info[:comment]}"
        migrate_list[pkg] = {:pkg => info[:pkg], :keyword => info[:keyword], :comment => "# #{info[:comment]}"}
      end
      @log.warn("#{warning_msg}")
      puts warning_msg if _options[:verbose]
    end
  elsif _options[:drop]
    _not_installed_pkg.each_pair do |pkg,info|
      if info[:comment].nil?
        warning_msg = "Drop not installed package: #{pkg}"
      else
        warning_msg = "Drop not installed package: #{pkg} comment: #{info[:comment]}"
      end
      @log.warn("#{warning_msg}")
      puts warning_msg if _options[:verbose]
    end
  end

  _installed_pkg_versions.each_pair do |pkg,info|
    if info[:comment].nil?
      migrate_list[pkg] = {:pkg => info[:pkg], :keyword => info[:keyword]}
    else
      migrate_list[pkg] = {:pkg => info[:pkg], :keyword => info[:keyword], :comment => "# #{info[:comment]}"}
    end
  end

  # write Tempfile
  migrate_list.each_pair do |pkg,info|
    if info[:comment].nil?
      name = "#{info[:pkg]} #{info[:keyword]}"
    else
      name = "#{info[:pkg]} #{info[:keyword]} #{info[:comment]}"
    end
    TMPFILE.syswrite(name + "\n")
  end
end

def migrate_to_dir
  begin
    # create a tmp dir, is exists delete it
    tmpdir = Dir.mktmpdir(File.basename($0))
    mydir = File.join(tmpdir, "package.keywords")
    FileUtils.mkdir(mydir)

    File.readlines(TMPFILE).each do |line|
      info, keyword = line.split(/ /)
      keyword = keyword.strip
      info = info.strip
      catname = info.split(/=/)[1].to_s.split(/\//)[0]
      catname = info.split(/\//)[0] if catname.nil?

      File.new("#{mydir}/#{catname}","a").syswrite(line)
    end

    FileUtils.rm_rf("/tmp/package.keywords")

    FileUtils.cp_r(mydir, "/tmp/package.keywords")

    FileUtils.rm_r(tmpdir)
  rescue => exc
    @log.error(exc)
    puts exc
    puts "saved to: #{mydir}"
    exit
  end
  return true
end

main
