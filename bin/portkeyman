#!/usr/bin/ruby -w

require 'optparse'
require 'logger'
require 'tempfile'
require 'tmpdir'
require 'fileutils'

#noinspection RubyResolve
require '/usr/lib/genfooutils'

PKMVERSION='0.0.9'
TMPFILE   = Tempfile.new("packages.keyword_#{File.basename($0)}")

# portkeyman not compatible with ruby version 1.8.x
(puts 'Sorry, ruby 1.8.x not supported'; exit) if RUBY_VERSION.start_with?('1.8')

@@genfooutils = GenfooUtils.new
@@file_or_dir_name = 'package.accept_keywords'

def main
  op                = OptionParser.new
  op.summary_indent = ''
  op.banner         = "#{File.basename($0)} [OPTIONS]"
  op.separator('')

  portage_keywords = File.join('/etc/portage/',@@file_or_dir_name)

  options = {
      :keywordfiledir => portage_keywords,
      :pkg_ver_mig    => false,
      :output_as      => 'file',
      :logfile        => false,
      :drop           => false,
      :version        => false,
      :opt            => false,
      :verbose        => false
  }

  logfile = @@genfooutils.set_logfile

  # default ist nothing to due
  op.on('-d', '--drop', 'remove not installed packages from keywords') do
    options[:opt]  = true
    options[:drop] = true
  end

  # write bash_completion for this
  op.on('-k FILE_DIR', '--keyword FILE_DIR', "set keyword file or directory, default: #{options[:keywordfiledir]}") do |args|
    options[:opt]            = true
    options[:keywordfiledir] = args
  end

  # set logfile or use default
  user = ENV['USER'].to_s.strip
  op.on('-l LOGFILE', '--logfile LOGFILE', "set logfile, default for user: #{user}, logfile: #{logfile}") do |args|
    options[:opt]     = true
    options[:logfile] = args
  end

  # migrate_noversion Filelist
  op.on('-p', '--pkg-mig', 'migrate no versions packages to installed packages') do
    options[:opt]         = true
    options[:pkg_ver_mig] = true
  end

  op.on('-o [FILE|DIR]', '--output [FILE|DIR]', "output as file or directory, default: #{options[:output_as]}") do |args|
    options[:opt] = true
    arg = args.downcase rescue arg = nil
    if arg.nil?
      puts 'wrong parameters'
      puts op
      exit
    end

    options = @@genfooutils.output_as(arg, options, op)

  end

  op.on('-v', '--verbose', 'verbose messages') do
    options[:opt]     = true
    options[:verbose] = true
  end

  op.on('-V', '--version', 'print version and exit') do
    options[:opt] = true
    puts "#{File.basename($0)} VERSION: #{PKMVERSION}"
    exit
  end

  op.separator('')
  tool   = File.basename($0)
  sample = (
  "Examples:\n"+
      "  #{tool} -l /tmp/#{tool}.log -k /etc/portage/#{@@file_or_dir_name} \t# set logfile to /tmp/#{tool}.log\n"+
      "  #{tool} -k /etc/portage/#{@@file_or_dir_name} -o f \t\t\t# save output as file\n"+
      "  #{tool} -k /etc/portage/#{@@file_or_dir_name} -o d \t\t\t# save output as directory (separate category)\n"+
      "  #{tool} -k /etc/portage/#{@@file_or_dir_name} -p \t\t\t# convert app-portage/genfoo-tools ~amd64 to >=app-portage/genfoo-tools-9999 ~amd64\n"+
      "  #{tool} --help \t\t\t\t\t\t\t\t# show this help"
  )

  sample.split("\n").each { |line| op.separator line }
  op.separator('')

  begin
    op.parse!
    unless options[:opt]
      puts op
      exit
    end
  rescue => exc
    puts exc
    puts "\n#{op}"
  end

  @@log = @@genfooutils.initialize_logger(options)
  @@genfooutils.check_file_or_directory(options[:keywordfiledir], options, @@log)

end

def pkgscan(_options)
  installed_pkg_versions   = {}
  installed_pkg_noversions = {}
  not_installed_pkg        = {}

  comment_tmp_file = '/tmp/comments'
  FileUtils.rm_f(comment_tmp_file)
  comment_tmp_file = File.new(comment_tmp_file, 'w')

  keywordline = []
  if File.directory?(_options[:keywordfiledir])
    Dir[File.join(_options[:keywordfiledir], '*')].each do |files|
      File.readlines(files).each do |line|
        next if line.nil?
        keywordline << line.strip.chomp
      end
    end
  else
    keywordline << File.readlines(_options[:keywordfiledir])
  end

  keywordline.flatten.each do |line|
    next if line == "\n"
    pkg = line.split(/ /)[0]
    next if line =~ /#/
    keyword = line.split(/ /)[1]

    tmp_file = File.new(comment_tmp_file, 'a')
    @comment = @@genfooutils.show_comment(line, tmp_file)

    if @comment.nil?
      File.readlines(comment_tmp_file).each do |comline|
        next if comline.nil?
        @comment = comline
      end
      begin
        File.delete(comment_tmp_file)
      rescue => exc
        @@log.fatal(exc)
      end
    end

    @comment = @@genfooutils.show_comment(line, comment_tmp_file)

    if line.start_with?('>')
      installed_pkg_versions[pkg] = { :pkg => pkg, :keyword => keyword, :comment => @comment }
      next
    elsif line.start_with?('=')
      installed_pkg_versions[pkg] = { :pkg => pkg, :keyword => keyword, :comment => @comment }
      next
    else
      puts "search for #{pkg}" if _options[:verbose]
      pkg_full = `qlist -ICv #{pkg}`.split("\n")[0] rescue pkg_full == nil
      if pkg_full.nil?
        not_installed_pkg[pkg] = { :pkg => pkg, :keyword => keyword, :comment => @comment }
        next
      end
      installed_pkg_noversions[pkg_full] = { :pkg => pkg, :keyword => keyword, :commnet => @comment }
    end
  end

  migrate_pkg(installed_pkg_noversions, installed_pkg_versions, not_installed_pkg, _options)

  # save as file and exit
  @@genfooutils.save_as_file_and_exit(_options, @@file_or_dir_name, @@log)

  # save as directory
  @@genfooutils.save_as_directory_and_exit(_options, @@file_or_dir_name, @@log)
end

def migrate_pkg(_installed_pkg_nover, _installed_pkg_ver, _not_installed_pkg, _options)
  migrate_list = {}
  # migrate all to >=categorie/name-version arch

  _installed_pkg_nover.each_pair do |pkg, info|
    p pkg
    if _options[:pkg_ver_mig]
      if info[:comment].nil?
        info_msg = "Migrate #{pkg} to #{info[:full_name]} #{info[:keyword]}"
      else
        info_msg = "Migrate #{pkg} to #{info[:full_name]} #{info[:keyword]} #{info[:comment]}"
      end
      @@log.info("#{info_msg}")
      puts info_msg if _options[:verbose]
      if info[:comment].nil?
        migrate_list[pkg] = { :pkg => ">=#{pkg}", :keyword => info[:keyword] }
      else
        migrate_list[pkg] = { :pkg => ">=#{pkg}", :keyword => info[:keyword], :comment => "# #{info[:comment]}" }
      end
    else
      if info[:comment].nil?
        warning_msg       = "don't migrate package #{info[:pkg]}. Installed version: #{pkg} used keyword: #{info[:keyword]}"
        migrate_list[pkg] = { :pkg => info[:pkg], :keyword => info[:keyword] }
      else
        warning_msg       = "don't migrate package #{info[:pkg]}. installed version: #{pkg}"+
            "used keyword: #{info[:keyword]} and comment: #{info[:comment]}"
        migrate_list[pkg] = { :pkg => info[:pkg], :keyword => info[:keyword], :comment => "# #{info[:comment]}" }
      end
      @@log.warn("#{warning_msg}")
      puts warning_msg if _options[:verbose]
    end
  end

  # not installed list ony when not options[:drop] true
  if not _options[:drop]
    _not_installed_pkg.each_pair do |pkg, info|
      if info[:comment].nil?
        warning_msg       ="ignore not installed package: #{pkg}"
        migrate_list[pkg] = { :pkg => info[:pkg], :keyword => info[:keyword] }
      else
        warning_msg       ="ignore not installed package: #{pkg} comment: #{info[:comment]}"
        migrate_list[pkg] = { :pkg => info[:pkg], :keyword => info[:keyword], :comment => "# #{info[:comment]}" }
      end
      @@log.warn("#{warning_msg}")
      puts warning_msg if _options[:verbose]
    end
  elsif _options[:drop]
    _not_installed_pkg.each_pair do |pkg, info|
      if info[:comment].nil?
        warning_msg = "drop not installed package: #{pkg}"
      else
        warning_msg = "drop not installed package: #{pkg} comment: #{info[:comment]}"
      end
      @@log.warn("#{warning_msg}")
      puts warning_msg if _options[:verbose]
    end
  end

  _installed_pkg_ver.each_pair do |pkg, info|
    if info[:comment].nil?
      migrate_list[pkg] = { :pkg => info[:pkg], :keyword => info[:keyword] }
    else
      migrate_list[pkg] = { :pkg => info[:pkg], :keyword => info[:keyword], :comment => "# #{info[:comment]}" }
    end
  end

  # write Tempfile
  migrate_list.each_pair do |_, info|
    if info[:comment].nil?
      name = "#{info[:pkg]} #{info[:keyword]}"
    else
      name = "#{info[:pkg]} #{info[:keyword]} #{info[:comment]}"
    end
    TMPFILE.syswrite(name + "\n")
  end
end

main
