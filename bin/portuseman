#!/usr/bin/ruby -w

require 'optparse'
require 'logger'
require 'tempfile'
require 'tmpdir'
require 'fileutils'

#noinspection RubyResolve
require '/usr/lib/gentooutils'

PUMVERSION = '0.0.5'
TMPFILE    = Tempfile.new("packages.use_#{File.basename($0)}")

# portuseman not compatible with ruby version 1.8.x
(puts 'Sorry, ruby 1.8.x not supported'; exit) if RUBY_VERSION.start_with?('1.8')

@genfooutils = GenfooUtils.new
@file_or_dir_name = 'package.use'

def main
  op                = OptionParser.new
  op.summary_indent = ''
  op.banner         = "#{File.basename($0)} [OPTIONS]"
  op.separator('')

  portage_use = File.join('/etc/portage', @file_or_dir_name)

  options = {
      :usefiledir  => portage_use,
      :pkg_ver_mig => false,
      :output_as   => 'file',
      :logfile     => false,
      :drop        => false,
      :version     => false,
      :opt         => false,
      :verbose     => false
  }

  logfile = @genfooutils.set_logfile

  # default ist nothing to due
  op.on('-d', '--drop', 'remove not installed packages from use file') do
    options[:opt]  = true
    options[:drop] = true
  end

  # write bash_completion for this
  op.on('-u FILE_DIR', '--use-file-dir FILE_DIR', "set use file or directory, default: #{options[:usefiledir]}") { |args|
    options[:opt]        = true
    options[:usefiledir] = args
  }

  # set logfile or use default
  user = ENV['USER'].to_s.strip
  op.on('-l LOGFILE', '--logfile LOGFILE', "set logfile, default for user: #{user}, logfile: #{logfile}") { |args|
    options[:opt]     = true
    options[:logfile] = args
  }

  op.on('-o [FILE|DIR]', '--output [FILE|DIR]', "output as file or directory, default: #{options[:output_as]}") do |args|
    options[:opt] = true
    arg = args.downcase rescue arg = nil
    if arg.nil?
      puts 'wrong parameters'
      puts op
      exit
    end

    options = @genfooutils.output_as(arg, options, op)

  end

  op.on('-v', '--verbose', 'verbose messages') do
    options[:opt]     = true
    options[:verbose] = true
  end

  op.on('-V', '--version', 'print version and exit') do
    options[:opt] = true
    puts "#{File.basename($0)} VERSION: #{PUMVERSION}"
    exit
  end

  op.separator('')
  tool   = File.basename($0)
  sample = (
  "Examples:\n"+
      "  #{tool} -l /tmp/#{tool}.log -u /etc/portage/#{@file_or_dir_name} \t# set logfile to /tmp/#{tool}.log\n"+
      "  #{tool} -u /etc/portage/#{@file_or_dir_name} -o f \t\t\t\t# save output as file\n"+
      "  #{tool} -u /etc/portage/#{@file_or_dir_name} -o d \t\t\t\t# save output as directory (separate category)\n"+
      "  #{tool} --help \t\t\t\t\t\t\t# show this help"
  )

  sample.split("\n").each { |line| op.separator line }
  op.separator('')

  begin
    op.parse!
    unless options[:opt]
      puts op
      exit
    end
  rescue => exc
    puts exc
    puts "\n#{op}"
  end

  @log = @genfooutils.initialize_logger(options)
  @genfooutils.check_file_or_directory(options[:usefiledir], options, @log)

end

def pkgscan(_options)
  installed_pkg_versions   = {}
  installed_pkg_noversions = {}
  not_installed_pkg        = {}

  comment_tmp_file = '/tmp/comments'
  FileUtils.rm_f(comment_tmp_file)
  comment_tmp_file = File.new(comment_tmp_file, 'w')

  packages = []
  if File.directory?(_options[:usefiledir])
    Dir[File.join(_options[:usefiledir], '*')].each { |file|
      File.readlines(file).each do |line|
        next if line.nil?
        packages << line
      end
    }
  else
    packages << File.readlines(_options[:usefiledir])
  end

  packages.flatten.each do |line|
    next if line == "\n"
    pkg = line.split(/ /)[0].strip
    use = line.split(pkg)[1].strip
    next if line =~ /#/

    tmp_file = File.new(comment_tmp_file, 'a')
    comment  = @genfooutils.show_comment(line, tmp_file)

    if comment.nil?
      File.readlines(comment_tmp_file).each do |comline|
        next if comline.nil?
        comment = comline
      end
      begin
        File.delete(comment_tmp_file)
      rescue => exc
        @log.fatal(exc)
      end
    end

    if installed_pkg_versions.to_s.include?(pkg)
      @log.info("pkg => #{pkg}, use => #{use}")
      use = migrate_useflags(installed_pkg_versions, pkg, use)
    elsif installed_pkg_noversions.to_s.include?(pkg)
      @log.info("pkg => #{pkg}, use => #{use}")
      use = migrate_useflags(installed_pkg_noversions, pkg, use)
    end

    if line.start_with?('>')
      installed_pkg_versions[pkg] = { :pkg => pkg, :use => use, :comment => comment }
      next
    elsif line.start_with?('=')
      installed_pkg_versions[pkg] = { :pkg => pkg, :use => use, :comment => comment }
      next
    else
      puts "search for #{pkg}" if _options[:verbose]
      pkg_full = `qlist -ICv #{pkg}`.split(/\n/)[0] rescue pkg_full == nil
      if pkg_full.nil?
        not_installed_pkg[pkg] = { :pkg => pkg, :use => use, :comment => comment }
        next
      end
      installed_pkg_noversions[pkg_full] = { :pkg => pkg, :use => use, :commnet => comment }
    end
  end

  migrate_pkg(installed_pkg_noversions, installed_pkg_versions, not_installed_pkg, _options)

  # save as file and exit
  @genfooutils.save_as_file_and_exit(_options, @file_or_dir_name, @log)

  # save as directory
  @genfooutils.save_as_directory_and_exit(_options, @file_or_dir_name, @log)
end

def migrate_useflags(_list, _pkg, _use)
  use = nil
  _list.each_value do |entry|
    next unless entry[:pkg].include?(_pkg)
    @log.info("serch pkg => #{_pkg}, found pkg => #{entry}")
    use = "#{_use} #{entry[:use]}"
  end
  if use.nil?
    @log.info("no migrate useflags - #{_use}")
    _use
  else
    @log.info("old use => #{_use}, new use => #{use}")
    use
  end
end

def migrate_pkg(_installed_pkg_nover, _installed_pkg_ver, _not_installed_pkg, _options)

  migrate_list = {}

  _installed_pkg_nover.each_pair do |pkg, info|
    if info[:comment].nil?
      warning_msg       = "don't migrate package #{info[:pkg]}. Installed version: #{pkg} used use: #{info[:use]}"
      migrate_list[pkg] = { :pkg => info[:pkg], :use => info[:use] }
    else
      warning_msg       = "don't migrate package #{info[:pkg]}. Installed version: #{pkg} used use: #{info[:use]} and comment: #{info[:comment]}"
      migrate_list[pkg] = { :pkg => info[:pkg], :use => info[:use], :comment => "# #{info[:comment]}" }
    end
    @log.warn("#{warning_msg}")
    puts warning_msg if _options[:verbose]
  end

  # not installed list ony when not options[:drop] true
  if not _options[:drop]
    _not_installed_pkg.each_pair do |pkg, info|
      if info[:comment].nil?
        warning_msg       ="ignore not installed package: #{pkg}"
        migrate_list[pkg] = { :pkg => info[:pkg], :use => info[:use] }
      else
        warning_msg       ="ignore not installed package: #{pkg} comment: #{info[:comment]}"
        migrate_list[pkg] = { :pkg => info[:pkg], :use => info[:use], :comment => "# #{info[:comment]}" }
      end
      @log.warn("#{warning_msg}")
      puts warning_msg if _options[:verbose]
    end
  elsif _options[:drop]
    _not_installed_pkg.each_pair do |pkg, info|
      if info[:comment].nil?
        warning_msg = "drop not installed package: #{pkg}"
      else
        warning_msg = "drop not installed package: #{pkg} comment: #{info[:comment]}"
      end
      @log.warn("#{warning_msg}")
      puts warning_msg if _options[:verbose]
    end
  end

  _installed_pkg_ver.each_pair do |pkg, info|
    if info[:comment].nil?
      migrate_list[pkg] = { :pkg => info[:pkg], :use => info[:use] }
    else
      migrate_list[pkg] = { :pkg => info[:pkg], :use => info[:use], :comment => "# #{info[:comment]}" }
    end
  end

  # write Tempfile
  migrate_list.each_pair do |_, info|
    if info[:comment].nil?
      name = "#{info[:pkg]} #{info[:use]}"
    else
      name = "#{info[:pkg]} #{info[:use]} #{info[:comment]}"
    end
    TMPFILE.syswrite(name + "\n")
  end
end

main
